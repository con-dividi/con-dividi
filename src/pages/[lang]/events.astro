---
import fs from "fs";

import Default from "~/layouts/Default.astro";
import { Languages } from "../../utils/types";
import Navbar from "~/components/Navbar.astro";
import Footer from "~/components/Footer.astro";
import CalendarTile from "~/components/CalendarTile.astro";
import Header from "~/components/Header.astro";

const calendarPath = "./data/calendar/";

const calendarsPath = fs.readdirSync(calendarPath).filter((e: string) => {
	return e.endsWith("csv");
});
const calendarsRaw = calendarsPath.map((e: string) => {
	return fs.readFileSync(calendarPath + e, { encoding: "utf8" });
});

interface Event {
	name: string;
	description: string;
	date: Date;
	poster: string;
	poster2: string | undefined;
}
const allCalendarsParsed: string[][][] = calendarsRaw.map((e: string) => {
	// Split the CSV string into lines
	const lines: string[] = e.split("\n");

	// Remove the header line and filter out any empty lines
	const dataLines: string[] = lines
		.slice(1)
		.filter((line: string) => line.trim() !== "");

	// Parse each line into an array of values
	return dataLines.map((line: string): string[] => {
		// Split the line by comma, handling quoted values
		return (
			line
				.match(/(".*?"|[^",\s]+)(?=\s*,|\s*$)/g)
				?.map((value: string) => value.replace(/^"|"$/g, "").trim()) ?? []
		);
	});
});

// Assuming Event is a defined type or interface
const calendars: Event[][] = allCalendarsParsed.map((e: string[][]) =>
	calendarParser(e),
);

let allEvents: Event[] = [];
calendars.forEach((e) => {
	allEvents = allEvents.concat(e);
});

export async function getStaticPaths() {
	return Languages.values().map((language: any) => {
		return {
			params: { lang: language },
			props: { language },
		};
	});
}

export function calendarParser(calendar: string[][]): Event[] {
	return calendar.map((e) => eventParser(e));
}

export function eventParser(e: string[]): Event {
	let daterow = e[2].split("/");
	let timerow = e[3].split(":");
	let date = new Date(
		Number(daterow[2]),
		Number(daterow[1]) - 1,
		Number(daterow[0]),
		Number(timerow[0]),
		Number(timerow[1]),
		Number(timerow[2]),
	);
	let name = e[0];
	let description = e[1];
	let poster = e[4];
	let poster2 = e[5];
	return {
		name: name,
		description: description,
		date: date,
		poster: poster,
		poster2: poster2,
	};
}

const { language } = Astro.props;
---

<Default title="homepage" language={language}>
	<header class="relative">
		<Navbar current={1} language={language} />
		<Header language={language} />
	</header>
	<div class="p-4 min-h-150">
		{
			(
				<>
					<h2 class="lg:flex rounded-lg text-2xl my-5 lg:mx-20">
						{language == Languages.IT
							? "Eventi questo mese"
							: "Upcoming events"}
					</h2>
					{allEvents.map((e, index) => {
						return (
							<CalendarTile
								name={e.name}
								description={e.description}
								date={e.date}
								link={e.poster}
								link2={e.poster2}
								language={language}
								id={"calendar_event_future-" + index}
								history={true}
							/>
						);
					})}
					<h2 class="lg:flex rounded-lg text-2xl my-5 lg:mx-20 pt-10">
						{language == Languages.IT ? "Eventi Passati" : "Expired Events"}
					</h2>
					{allEvents.map((e, index) => {
						return (
							<CalendarTile
								name={e.name}
								description={e.description}
								date={e.date}
								link={e.poster}
								link2={e.poster2}
								language={language}
								id={"calendar_event_past-" + index}
								history={false}
							/>
						);
					})}
				</>
			)
		}
	</div>
	<Footer language={language} />
</Default>

<script>
	// export variable with current date
	export const currentDate = new Date();
</script>
